#!/usr/bin/env node

'use strict';

var UppTalk = require('..');

var DEBUG = function() {
  if (opts.verbose)
    console.log.apply(console, arguments);
};
var nomnom = require('nomnom');

var opts = nomnom
  .option('verbose', {
    abbr: 'v',
    flag: true,
    help: 'Print debugging info'
  })
  .option('apikey', {
    // abbr: 'k', broken
    required: true,
    help: 'Set your api key'
  })
  .option('auth', {
    // abbr: 'a', broken
    help: 'Set your credentials, <username>:<password>'
  })
  .option('host', {
    // abbr: 'h', broken
    help: 'Specifiy host'
  })
  .option('port', {
    // abbr: 'p', broken
    help: 'Specify port',
  })
  .option('secure', {
    // abbr: 's', broken
    help: 'Specify either to use TLS, true or false'
  })
  .option('close', {
    help: 'Close connection and return when request completed, true (default) or false'
  })
  .option('version', {
    flag: true,
    help: 'print version and exit',
    abbr: 'V',
    callback: function() {
      return '0.6.5';
    }
  })
  .option('method', {
    position: '0',
    help: 'Method to send',
    required: true
  })
  .option('payload', {
    position: '1',
    help: 'Payload to send, escape object with quotes ex: \'{"foo": "bar"}\' or \'["foo", "bar"]\''
  })
  .parse();

var username;
var password;
if (opts.auth) {
  username = opts.auth.split(':')[0];
  password = opts.auth.split(':')[1];
}
var method = opts.method;
var payload;
try {
  payload = JSON.parse(opts.payload);
}
catch (e) {
  payload = opts.payload;
}

var options = {};
if (opts.host)
  options.host = opts.host;
if (opts.port)
  options.port = opts.port;
if (opts.apikey)
  options.apikey = opts.apikey;
if ('secure' in opts)
  options.secure = opts.secure;
if (opts.close !== false)
  opts.close = true;

var client = new UppTalk(options);
client.keepalive = false;

DEBUG('OPENING');

var timeAtSending;

var p = client.open();
if (username && password) {
  p = p.then(function() {
    DEBUG('AUTHENTICATING');
    var now = Date.now();
    return client.exec('authenticate', {username: username, password: password})
    .then(function() {
      DEBUG('AUTHENTICATED', Date.now() - now + 'ms');
    });
  });
}
p.then(function() {
  DEBUG('SENDING REQUEST');
  timeAtSending = Date.now();
  return client.exec(method, payload);
})
.then(function(res) {
  done(undefined, res);
})
.catch(function(err) {
  done(err);
});

var done = function(err, res) {
  if (err)
    console.error(err);
  else if (res)
    console.log(res);

  DEBUG('RECEIVED RESPONSE', Date.now() - timeAtSending + 'ms');

  if (opts.close !== false) {
    DEBUG('CLOSING');
    client.close();
  }
};

client.once('open', function() {
  DEBUG('OPEN');
});
client.once('close', function() {
  DEBUG('CLOSED');
  process.exit(1);
});
client.on('send', function(m) {
  DEBUG('SENDING:', JSON.stringify(m));
});
client.on('message', function(m) {
  DEBUG('RECEIVED:', JSON.stringify(m));
});
client.on('error', function(err) {
  throw err;
});