#!/usr/bin/env node

'use strict';

var UppTalk = require('..');

var DEBUG = function() {
  if (opts.verbose)
    console.log.apply(console, arguments);
};
var nomnom = require('nomnom');

var opts = nomnom
  .option('verbose', {
    abbr: 'v',
    flag: true,
    help: 'Print debugging info'
  })
  .option('apikey', {
    abbr: 'k',
    required: true,
    help: 'Set your api key'
  })
  .option('auth', {
    abbr: 'a',
    help: 'Set your credentials, <username>:<password>'
  })
  .option('host', {
    abbr: 'h',
    help: 'Specifiy host'
  })
  .option('port', {
    abbr: 'p',
    help: 'Specify port',
  })
  .option('secure', {
    abbr: 's',
    help: 'Specify either to use TLS, true or false'
  })
  .option('version', {
    flag: true,
    abbr: 'V',
    help: 'print version and exit',
    callback: function() {
      return "0.6.3";
    }
  })
  .option('method', {
    position: '0',
    help: 'Method to send',
    required: true
  })
  .option('payload', {
    position: '1',
    help: 'Payload to send, escape object with quotes ex: \'{"foo": "bar"}\' or \'["foo", "bar"]\''
  })
  .parse();

var username;
var password;
if (opts.auth) {
  username = opts.auth.split(':')[0];
  password = opts.auth.split(':')[1];
}
var method = opts.method;
var payload;
try {
  payload = JSON.parse(opts.payload);
}
catch (e) {
  payload = opts.payload;
}

var options = {};
if (opts.host)
  options.host = opts.host;
if (opts.port)
  options.port = opts.port;
if (opts.apikey)
  options.apikey = opts.apikey;
if ('secure' in opts)
  options.secure = opts.secure;

var client = new UppTalk(options);
client.keepalive = false;

DEBUG('OPENING');
client.open(function() {
  DEBUG('OPEN');
  if (username && password) {
    DEBUG('AUTHENTICATING');
    this.send('authenticate', {username: username, password: password}, function(err) {
      if (err) {
        console.error('Authentication failed');
        process.exit(1);
      }
      process.nextTick(function() {
        DEBUG('AUTHENTICATED');
      })
      call(method, payload);
    });
  }
  else {
    call(method, payload);
  }
});
client.once('close', function() {
  DEBUG('CLOSED');
  process.exit(1);
});
client.on('send', function(m) {
  DEBUG('SENDING:');
  DEBUG(m);
});
client.on('message', function(m) {
  DEBUG('RECEIVED:');
  DEBUG(m);
});
client.on('error', function(err) {
  throw err;
})

var done = function(err, res) {
  process.nextTick(function() {
    DEBUG('RESPONSE')
    if (err !== undefined)
      console.log(err);
    else if (res !== undefined)
        console.log(res);
    DEBUG('CLOSING');
    process.nextTick(function() {
      client.close();
    });
  });
};

var call = function(method, payload) {
  if (payload)
    client.send(method, payload, done);
  else
    client.send(method, done);
  process.nextTick(function() {
    DEBUG('SENT');
  });
};